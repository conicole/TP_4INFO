"main.ml" 4 15 19 "main.ml" 4 15 32
type(
  out_channel -> Grammar.VTSet.t -> unit
)
ident(
  def output_vt_set "main.ml" 10 151 151 "_none_" 1 0 -1
)
"main.ml" 4 15 33 "main.ml" 4 15 34
type(
  out_channel
)
ident(
  def o "main.ml" 4 15 35 "main.ml" 7 126 148
)
"main.ml" 4 15 35 "main.ml" 4 15 36
type(
  Grammar.VTSet.t
)
ident(
  def s "main.ml" 5 40 41 "main.ml" 7 126 148
)
"main.ml" 5 40 41 "main.ml" 5 40 55
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 5 40 56 "main.ml" 5 40 57
type(
  out_channel
)
ident(
  int_ref o "main.ml" 4 15 33 "main.ml" 4 15 34
)
"main.ml" 5 40 58 "main.ml" 5 40 61
type(
  (unit, out_channel, unit) format
)
"main.ml" 5 40 41 "main.ml" 5 40 61
call(
  stack
)
type(
  unit
)
"main.ml" 6 63 64 "main.ml" 6 63 74
type(
  (Grammar.VTSet.elt -> unit) -> Grammar.VTSet.t -> unit
)
ident(
  ext_ref Grammar.VTSet.iter
)
"main.ml" 6 63 80 "main.ml" 6 63 82
type(
  Grammar.VTSet.elt
)
ident(
  def vt "main.ml" 6 63 86 "main.ml" 6 63 121
)
"main.ml" 6 63 86 "main.ml" 6 63 100
type(
  out_channel ->
  ((out_channel -> Grammar.VTSet.elt -> unit) -> Grammar.VTSet.elt -> unit,
   out_channel, unit)
  format ->
  (out_channel -> Grammar.VTSet.elt -> unit) -> Grammar.VTSet.elt -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 6 63 101 "main.ml" 6 63 102
type(
  out_channel
)
ident(
  int_ref o "main.ml" 4 15 33 "main.ml" 4 15 34
)
"main.ml" 6 63 103 "main.ml" 6 63 108
type(
  ((out_channel -> Grammar.VTSet.elt -> unit) -> Grammar.VTSet.elt -> unit,
   out_channel, unit)
  format
)
"main.ml" 6 63 109 "main.ml" 6 63 118
type(
  out_channel -> Grammar.VTSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vt
)
"main.ml" 6 63 119 "main.ml" 6 63 121
type(
  Grammar.VTSet.elt
)
ident(
  int_ref vt "main.ml" 6 63 80 "main.ml" 6 63 82
)
"main.ml" 6 63 86 "main.ml" 6 63 121
call(
  tail
)
type(
  unit
)
"main.ml" 6 63 75 "main.ml" 6 63 122
type(
  Grammar.VTSet.elt -> unit
)
"main.ml" 6 63 123 "main.ml" 6 63 124
type(
  Grammar.VTSet.t
)
ident(
  int_ref s "main.ml" 4 15 35 "main.ml" 4 15 36
)
"main.ml" 6 63 64 "main.ml" 6 63 124
call(
  stack
)
type(
  unit
)
"main.ml" 7 126 127 "main.ml" 7 126 141
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 7 126 142 "main.ml" 7 126 143
type(
  out_channel
)
ident(
  int_ref o "main.ml" 4 15 33 "main.ml" 4 15 34
)
"main.ml" 7 126 144 "main.ml" 7 126 148
type(
  (unit, out_channel, unit) format
)
"main.ml" 7 126 127 "main.ml" 7 126 148
call(
  tail
)
type(
  unit
)
"main.ml" 6 63 64 "main.ml" 7 126 148
type(
  unit
)
"main.ml" 5 40 41 "main.ml" 7 126 148
type(
  unit
)
"main.ml" 31 592 597 "main.ml" 31 592 602
type(
  'a -> 'b
)
ident(
  def token "main.ml" 34 673 674 "main.ml" 43 942 945
)
"main.ml" 32 606 612 "main.ml" 32 606 613
type(
  'a
)
"main.ml" 32 606 617 "main.ml" 32 606 625
type(
  string -> 'b
)
ident(
  ext_ref Pervasives.failwith
)
"main.ml" 32 606 626 "main.ml" 32 606 671
type(
  string
)
"main.ml" 32 606 617 "main.ml" 32 606 671
call(
  tail
)
type(
  'b
)
"main.ml" 32 606 608 "main.ml" 32 606 671
type(
  'a -> 'b
)
"main.ml" 34 673 678 "main.ml" 34 673 693
type(
  'c -> 'd
)
ident(
  def string_of_token "main.ml" 37 782 783 "main.ml" 43 942 945
)
"main.ml" 35 698 704 "main.ml" 35 698 705
type(
  'c
)
"main.ml" 35 698 709 "main.ml" 35 698 717
type(
  string -> 'd
)
ident(
  ext_ref Pervasives.failwith
)
"main.ml" 35 698 718 "main.ml" 35 698 780
type(
  string
)
"main.ml" 35 698 709 "main.ml" 35 698 780
call(
  tail
)
type(
  'd
)
"main.ml" 35 698 700 "main.ml" 35 698 780
type(
  'c -> 'd
)
"main.ml" 37 782 787 "main.ml" 37 782 803
type(
  'e -> 'f -> 'g
)
ident(
  def terminal_of_ulex "main.ml" 40 872 873 "main.ml" 43 942 945
)
"main.ml" 38 807 813 "main.ml" 38 807 814
type(
  'e
)
"main.ml" 38 807 815 "main.ml" 38 807 816
type(
  'f
)
"main.ml" 38 807 820 "main.ml" 38 807 828
type(
  string -> 'g
)
ident(
  ext_ref Pervasives.failwith
)
"main.ml" 38 807 829 "main.ml" 38 807 867
type(
  string
)
"main.ml" 38 807 820 "main.ml" 38 807 867
call(
  tail
)
type(
  'g
)
"main.ml" 38 807 809 "main.ml" 38 807 867
type(
  'e -> 'f -> 'g
)
"main.ml" 40 872 877 "main.ml" 40 872 883
type(
  'h -> 'i
)
ident(
  def is_eof "main.ml" 41 887 940 "main.ml" 43 942 945
)
"main.ml" 41 887 898 "main.ml" 41 887 899
type(
  'h
)
"main.ml" 41 887 903 "main.ml" 41 887 911
type(
  string -> 'i
)
ident(
  ext_ref Pervasives.failwith
)
"main.ml" 41 887 912 "main.ml" 41 887 940
type(
  string
)
"main.ml" 41 887 903 "main.ml" 41 887 940
call(
  tail
)
type(
  'i
)
"main.ml" 41 887 889 "main.ml" 41 887 940
type(
  'h -> 'i
)
"main.ml" 45 947 951 "main.ml" 45 947 958
type(
  Lexing.lexbuf -> MyLexer.ulex list
)
ident(
  def scanner "main.ml" 63 1328 1328 "_none_" 1 0 -1
)
"main.ml" 45 947 959 "main.ml" 45 947 965
type(
  Lexing.lexbuf
)
ident(
  def lexbuf "main.ml" 47 971 973 "main.ml" 60 1294 1323
)
"main.ml" 47 971 981 "main.ml" 47 971 992
type(
  int -> MyLexer.ulex list -> MyLexer.ulex list
)
ident(
  def scanner_rec "main.ml" 47 971 973 "main.ml" 60 1294 1323
)
"main.ml" 47 971 993 "main.ml" 47 971 994
type(
  int
)
ident(
  def n "main.ml" 47 971 995 "main.ml" 58 1280 1288
)
"main.ml" 47 971 995 "main.ml" 47 971 996
type(
  MyLexer.ulex list
)
ident(
  def l "main.ml" 48 1000 1004 "main.ml" 58 1280 1288
)
"main.ml" 49 1009 1018 "main.ml" 49 1009 1020
type(
  MyLexer.ulex
)
ident(
  def tk "main.ml" 50 1047 1052 "main.ml" 52 1091 1128
)
"main.ml" 49 1009 1023 "main.ml" 49 1009 1036
type(
  Lexing.lexbuf -> MyLexer.ulex
)
ident(
  ext_ref MyLexer.token
)
"main.ml" 49 1009 1037 "main.ml" 49 1009 1043
type(
  Lexing.lexbuf
)
ident(
  int_ref lexbuf "main.ml" 45 947 959 "main.ml" 45 947 965
)
"main.ml" 49 1009 1023 "main.ml" 49 1009 1043
call(
  stack
)
type(
  MyLexer.ulex
)
"main.ml" 50 1047 1055 "main.ml" 50 1047 1069
type(
  MyLexer.ulex -> bool
)
ident(
  ext_ref MyLexer.is_eof
)
"main.ml" 50 1047 1070 "main.ml" 50 1047 1072
type(
  MyLexer.ulex
)
ident(
  int_ref tk "main.ml" 49 1009 1018 "main.ml" 49 1009 1020
)
"main.ml" 50 1047 1055 "main.ml" 50 1047 1072
call(
  stack
)
type(
  bool
)
"main.ml" 51 1073 1084 "main.ml" 51 1073 1086
type(
  MyLexer.ulex
)
ident(
  int_ref tk "main.ml" 49 1009 1018 "main.ml" 49 1009 1020
)
"main.ml" 51 1073 1088 "main.ml" 51 1073 1089
type(
  MyLexer.ulex list
)
ident(
  int_ref l "main.ml" 47 971 995 "main.ml" 47 971 996
)
"main.ml" 51 1073 1083 "main.ml" 51 1073 1090
type(
  MyLexer.ulex list
)
"main.ml" 52 1091 1101 "main.ml" 52 1091 1112
type(
  int -> MyLexer.ulex list -> MyLexer.ulex list
)
ident(
  int_ref scanner_rec "main.ml" 47 971 981 "main.ml" 47 971 992
)
"main.ml" 52 1091 1114 "main.ml" 52 1091 1115
type(
  int
)
ident(
  int_ref n "main.ml" 47 971 993 "main.ml" 47 971 994
)
"main.ml" 52 1091 1115 "main.ml" 52 1091 1116
type(
  int -> int -> int
)
ident(
  ext_ref Pervasives.( + )
)
"main.ml" 52 1091 1116 "main.ml" 52 1091 1117
type(
  int
)
"main.ml" 52 1091 1113 "main.ml" 52 1091 1118
type(
  int
)
"main.ml" 52 1091 1120 "main.ml" 52 1091 1122
type(
  MyLexer.ulex
)
ident(
  int_ref tk "main.ml" 49 1009 1018 "main.ml" 49 1009 1020
)
"main.ml" 52 1091 1126 "main.ml" 52 1091 1127
type(
  MyLexer.ulex list
)
ident(
  int_ref l "main.ml" 47 971 995 "main.ml" 47 971 996
)
"main.ml" 52 1091 1119 "main.ml" 52 1091 1128
type(
  MyLexer.ulex list
)
"main.ml" 52 1091 1101 "main.ml" 52 1091 1128
call(
  stack
)
type(
  MyLexer.ulex list
)
"main.ml" 50 1047 1052 "main.ml" 52 1091 1128
type(
  MyLexer.ulex list
)
"main.ml" 49 1009 1014 "main.ml" 52 1091 1128
type(
  MyLexer.ulex list
)
"main.ml" 53 1130 1139 "main.ml" 53 1130 1140
type(
  exn
)
ident(
  def x "main.ml" 54 1145 1150 "main.ml" 58 1280 1288
)
"main.ml" 55 1156 1162 "main.ml" 55 1156 1175
type(
  (string -> int -> unit, out_channel, unit) format -> string -> int -> unit
)
ident(
  ext_ref Printf.printf
)
"main.ml" 55 1156 1176 "main.ml" 55 1156 1237
type(
  (string -> int -> unit, out_channel, unit) format
)
"main.ml" 56 1239 1247 "main.ml" 56 1239 1265
type(
  exn -> string
)
ident(
  ext_ref Printexc.to_string
)
"main.ml" 56 1239 1266 "main.ml" 56 1239 1267
type(
  exn
)
ident(
  int_ref x "main.ml" 53 1130 1139 "main.ml" 53 1130 1140
)
"main.ml" 56 1239 1246 "main.ml" 56 1239 1268
call(
  stack
)
type(
  string
)
"main.ml" 56 1239 1269 "main.ml" 56 1239 1270
type(
  int
)
ident(
  int_ref n "main.ml" 47 971 993 "main.ml" 47 971 994
)
"main.ml" 55 1156 1162 "main.ml" 56 1239 1270
call(
  stack
)
type(
  unit
)
"main.ml" 57 1272 1278 "main.ml" 57 1272 1279
type(
  MyLexer.ulex list
)
ident(
  int_ref l "main.ml" 47 971 995 "main.ml" 47 971 996
)
"main.ml" 54 1145 1150 "main.ml" 58 1280 1288
type(
  MyLexer.ulex list
)
"main.ml" 48 1000 1004 "main.ml" 58 1280 1288
type(
  MyLexer.ulex list
)
"main.ml" 60 1294 1296 "main.ml" 60 1294 1304
type(
  MyLexer.ulex list -> MyLexer.ulex list
)
ident(
  ext_ref List.rev
)
"main.ml" 60 1294 1306 "main.ml" 60 1294 1317
type(
  int -> MyLexer.ulex list -> MyLexer.ulex list
)
ident(
  int_ref scanner_rec "main.ml" 47 971 981 "main.ml" 47 971 992
)
"main.ml" 60 1294 1318 "main.ml" 60 1294 1319
type(
  int
)
"main.ml" 60 1294 1320 "main.ml" 60 1294 1322
type(
  MyLexer.ulex list
)
"main.ml" 60 1294 1305 "main.ml" 60 1294 1323
call(
  stack
)
type(
  MyLexer.ulex list
)
"main.ml" 60 1294 1296 "main.ml" 60 1294 1323
call(
  tail
)
type(
  MyLexer.ulex list
)
"main.ml" 47 971 973 "main.ml" 60 1294 1323
type(
  MyLexer.ulex list
)
"main.ml" 63 1328 1332 "main.ml" 63 1328 1344
type(
  string ref
)
ident(
  def grammar_file "main.ml" 65 1356 1356 "_none_" 1 0 -1
)
"main.ml" 63 1328 1347 "main.ml" 63 1328 1350
type(
  string -> string ref
)
ident(
  ext_ref Pervasives.ref
)
"main.ml" 63 1328 1351 "main.ml" 63 1328 1353
type(
  string
)
"main.ml" 63 1328 1347 "main.ml" 63 1328 1353
type(
  string ref
)
"main.ml" 65 1356 1360 "main.ml" 65 1356 1364
type(
  (string * Arg.spec * string) list
)
ident(
  def args "main.ml" 69 1473 1473 "_none_" 1 0 -1
)
"main.ml" 66 1369 1371 "main.ml" 66 1369 1381
type(
  string
)
"main.ml" 66 1369 1397 "main.ml" 66 1369 1409
type(
  string ref
)
ident(
  int_ref grammar_file "main.ml" 63 1328 1332 "main.ml" 63 1328 1344
)
"main.ml" 66 1369 1382 "main.ml" 66 1369 1409
type(
  Arg.spec
)
"main.ml" 66 1369 1410 "main.ml" 66 1369 1467
type(
  string
)
"main.ml" 66 1369 1370 "main.ml" 66 1369 1468
type(
  string * Arg.spec * string
)
"main.ml" 65 1356 1367 "main.ml" 67 1470 1471
type(
  (string * Arg.spec * string) list
)
"main.ml" 69 1473 1477 "main.ml" 69 1473 1486
type(
  string
)
ident(
  def usage_msg "main.ml" 71 1499 1499 "_none_" 1 0 -1
)
"main.ml" 69 1473 1489 "main.ml" 69 1473 1497
type(
  string
)
"main.ml" 71 1499 1503 "main.ml" 71 1499 1512
type(
  unit -> unit
)
ident(
  def check_arg "main.ml" 76 1601 1601 "_none_" 1 0 -1
)
"main.ml" 71 1499 1513 "main.ml" 71 1499 1515
type(
  unit
)
"main.ml" 72 1519 1526 "main.ml" 72 1519 1527
type(
  string ref -> string
)
ident(
  ext_ref Pervasives.( ! )
)
"main.ml" 72 1519 1527 "main.ml" 72 1519 1539
type(
  string ref
)
ident(
  int_ref grammar_file "main.ml" 63 1328 1332 "main.ml" 63 1328 1344
)
"main.ml" 72 1519 1526 "main.ml" 72 1519 1539
type(
  string
)
"main.ml" 73 1545 1548 "main.ml" 73 1545 1550
type(
  string
)
"main.ml" 73 1545 1554 "main.ml" 73 1545 1563
type(
  (Arg.key * Arg.spec * Arg.doc) list -> Arg.usage_msg -> unit
)
ident(
  ext_ref Arg.usage
)
"main.ml" 73 1545 1564 "main.ml" 73 1545 1568
type(
  (Arg.key * Arg.spec * Arg.doc) list
)
ident(
  int_ref args "main.ml" 65 1356 1360 "main.ml" 65 1356 1364
)
"main.ml" 73 1545 1569 "main.ml" 73 1545 1578
type(
  Arg.usage_msg
)
ident(
  int_ref usage_msg "main.ml" 69 1473 1477 "main.ml" 69 1473 1486
)
"main.ml" 73 1545 1554 "main.ml" 73 1545 1578
call(
  stack
)
type(
  unit
)
"main.ml" 73 1545 1581 "main.ml" 73 1545 1585
type(
  int -> unit
)
ident(
  ext_ref Pervasives.exit
)
"main.ml" 73 1545 1586 "main.ml" 73 1545 1587
type(
  int
)
"main.ml" 73 1545 1581 "main.ml" 73 1545 1587
call(
  tail
)
type(
  unit
)
"main.ml" 73 1545 1554 "main.ml" 73 1545 1587
type(
  unit
)
"main.ml" 74 1588 1591 "main.ml" 74 1588 1592
type(
  string
)
"main.ml" 74 1588 1597 "main.ml" 74 1588 1599
type(
  unit
)
"main.ml" 72 1519 1520 "main.ml" 74 1588 1599
type(
  unit
)
"main.ml" 77 1609 1610 "main.ml" 77 1609 1619
type(
  (Arg.key * Arg.spec * Arg.doc) list ->
  Arg.anon_fun -> Arg.usage_msg -> unit
)
ident(
  ext_ref Arg.parse
)
"main.ml" 77 1609 1620 "main.ml" 77 1609 1624
type(
  (Arg.key * Arg.spec * Arg.doc) list
)
ident(
  int_ref args "main.ml" 65 1356 1360 "main.ml" 65 1356 1364
)
"main.ml" 77 1609 1630 "main.ml" 77 1609 1631
type(
  string
)
"main.ml" 77 1609 1635 "main.ml" 77 1609 1637
type(
  unit
)
"main.ml" 77 1609 1625 "main.ml" 77 1609 1638
type(
  Arg.anon_fun
)
"main.ml" 77 1609 1639 "main.ml" 77 1609 1648
type(
  Arg.usage_msg
)
ident(
  int_ref usage_msg "main.ml" 69 1473 1477 "main.ml" 69 1473 1486
)
"main.ml" 77 1609 1610 "main.ml" 77 1609 1648
call(
  stack
)
type(
  unit
)
"main.ml" 78 1652 1653 "main.ml" 78 1652 1662
type(
  unit -> unit
)
ident(
  int_ref check_arg "main.ml" 71 1499 1503 "main.ml" 71 1499 1512
)
"main.ml" 78 1652 1663 "main.ml" 78 1652 1665
type(
  unit
)
"main.ml" 78 1652 1653 "main.ml" 78 1652 1665
call(
  stack
)
type(
  unit
)
"main.ml" 79 1667 1672 "main.ml" 79 1667 1673
type(
  Grammar.grammar
)
ident(
  def g "main.ml" 80 1712 1713 "main.ml" 116 3186 3242
)
"main.ml" 79 1667 1677 "main.ml" 79 1667 1694
type(
  string -> Grammar.grammar
)
ident(
  ext_ref Grammar.from_file
)
"main.ml" 79 1667 1695 "main.ml" 79 1667 1696
type(
  string ref -> string
)
ident(
  ext_ref Pervasives.( ! )
)
"main.ml" 79 1667 1696 "main.ml" 79 1667 1708
type(
  string ref
)
ident(
  int_ref grammar_file "main.ml" 63 1328 1332 "main.ml" 63 1328 1344
)
"main.ml" 79 1667 1695 "main.ml" 79 1667 1708
type(
  string
)
"main.ml" 79 1667 1677 "main.ml" 79 1667 1708
call(
  stack
)
type(
  Grammar.grammar
)
"main.ml" 80 1712 1717 "main.ml" 80 1712 1720
type(
  Grammar.VNSet.elt -> bool
)
ident(
  def acc "main.ml" 81 1736 1737 "main.ml" 116 3186 3242
)
"main.ml" 80 1712 1723 "main.ml" 80 1712 1730
type(
  Grammar.grammar -> Grammar.VNSet.elt -> bool
)
ident(
  ext_ref LL1.acc
)
"main.ml" 80 1712 1731 "main.ml" 80 1712 1732
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 80 1712 1723 "main.ml" 80 1712 1732
call(
  stack
)
type(
  Grammar.VNSet.elt -> bool
)
"main.ml" 81 1736 1741 "main.ml" 81 1736 1744
type(
  Grammar.VNSet.elt -> bool
)
ident(
  def gen "main.ml" 82 1760 1761 "main.ml" 116 3186 3242
)
"main.ml" 81 1736 1747 "main.ml" 81 1736 1754
type(
  Grammar.grammar -> Grammar.VNSet.elt -> bool
)
ident(
  ext_ref LL1.gen
)
"main.ml" 81 1736 1755 "main.ml" 81 1736 1756
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 81 1736 1747 "main.ml" 81 1736 1756
call(
  stack
)
type(
  Grammar.VNSet.elt -> bool
)
"main.ml" 82 1760 1765 "main.ml" 82 1760 1767
type(
  Grammar.VNSet.t
)
ident(
  def nt "main.ml" 83 1786 1787 "main.ml" 116 3186 3242
)
"main.ml" 82 1760 1770 "main.ml" 82 1760 1780
type(
  Grammar.grammar -> Grammar.VNSet.t
)
ident(
  ext_ref Grammar.nterminals
)
"main.ml" 82 1760 1781 "main.ml" 82 1760 1782
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 82 1760 1770 "main.ml" 82 1760 1782
call(
  stack
)
type(
  Grammar.VNSet.t
)
"main.ml" 83 1786 1791 "main.ml" 83 1786 1793
type(
  bool
)
ident(
  def wf "main.ml" 90 2102 2104 "main.ml" 116 3186 3242
)
"main.ml" 84 1797 1798 "main.ml" 84 1797 1808
type(
  (Grammar.VNSet.elt -> bool -> bool) -> Grammar.VNSet.t -> bool -> bool
)
ident(
  ext_ref Grammar.VNSet.fold
)
"main.ml" 84 1797 1814 "main.ml" 84 1797 1816
type(
  Grammar.VNSet.elt
)
ident(
  def vn "main.ml" 84 1797 1817 "main.ml" 89 2071 2088
)
"main.ml" 84 1797 1817 "main.ml" 84 1797 1818
type(
  bool
)
ident(
  def b "main.ml" 85 1823 1825 "main.ml" 89 2071 2088
)
"main.ml" 85 1823 1829 "main.ml" 85 1823 1832
type(
  bool
)
ident(
  def acc "main.ml" 86 1845 1847 "main.ml" 89 2071 2088
)
"main.ml" 85 1823 1835 "main.ml" 85 1823 1838
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref acc "main.ml" 80 1712 1717 "main.ml" 80 1712 1720
)
"main.ml" 85 1823 1839 "main.ml" 85 1823 1841
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 84 1797 1814 "main.ml" 84 1797 1816
)
"main.ml" 85 1823 1835 "main.ml" 85 1823 1841
call(
  stack
)
type(
  bool
)
"main.ml" 86 1845 1851 "main.ml" 86 1845 1854
type(
  bool
)
ident(
  def gen "main.ml" 87 1868 1870 "main.ml" 89 2071 2088
)
"main.ml" 86 1845 1857 "main.ml" 86 1845 1860
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref gen "main.ml" 81 1736 1741 "main.ml" 81 1736 1744
)
"main.ml" 86 1845 1861 "main.ml" 86 1845 1863
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 84 1797 1814 "main.ml" 84 1797 1816
)
"main.ml" 86 1845 1857 "main.ml" 86 1845 1863
call(
  stack
)
type(
  bool
)
"main.ml" 87 1868 1873 "main.ml" 87 1868 1876
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"main.ml" 87 1868 1877 "main.ml" 87 1868 1880
type(
  bool
)
ident(
  int_ref acc "main.ml" 85 1823 1829 "main.ml" 85 1823 1832
)
"main.ml" 87 1868 1873 "main.ml" 87 1868 1880
type(
  bool
)
"main.ml" 87 1868 1889 "main.ml" 87 1868 1903
type(
  out_channel ->
  ((out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit,
   out_channel, unit)
  format ->
  (out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 87 1868 1904 "main.ml" 87 1868 1910
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 87 1868 1911 "main.ml" 87 1868 1948
type(
  ((out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit,
   out_channel, unit)
  format
)
"main.ml" 87 1868 1949 "main.ml" 87 1868 1958
type(
  out_channel -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vn
)
"main.ml" 87 1868 1959 "main.ml" 87 1868 1961
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 84 1797 1814 "main.ml" 84 1797 1816
)
"main.ml" 87 1868 1889 "main.ml" 87 1868 1961
call(
  stack
)
type(
  unit
)
"main.ml" 87 1868 1963 "main.ml" 87 1868 1968
type(
  out_channel -> unit
)
ident(
  ext_ref Pervasives.flush
)
"main.ml" 87 1868 1969 "main.ml" 87 1868 1975
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 87 1868 1963 "main.ml" 87 1868 1975
call(
  stack
)
type(
  unit
)
"main.ml" 87 1868 1887 "main.ml" 87 1868 1977
type(
  unit
)
"main.ml" 87 1868 1870 "main.ml" 87 1868 1977
type(
  unit
)
"main.ml" 88 1979 1984 "main.ml" 88 1979 1987
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"main.ml" 88 1979 1988 "main.ml" 88 1979 1991
type(
  bool
)
ident(
  int_ref gen "main.ml" 86 1845 1851 "main.ml" 86 1845 1854
)
"main.ml" 88 1979 1984 "main.ml" 88 1979 1991
type(
  bool
)
"main.ml" 88 1979 1997 "main.ml" 88 1979 2011
type(
  out_channel ->
  ((out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit,
   out_channel, unit)
  format ->
  (out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 88 1979 2012 "main.ml" 88 1979 2018
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 88 1979 2019 "main.ml" 88 1979 2056
type(
  ((out_channel -> Grammar.VNSet.elt -> unit) -> Grammar.VNSet.elt -> unit,
   out_channel, unit)
  format
)
"main.ml" 88 1979 2057 "main.ml" 88 1979 2066
type(
  out_channel -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vn
)
"main.ml" 88 1979 2067 "main.ml" 88 1979 2069
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 84 1797 1814 "main.ml" 84 1797 1816
)
"main.ml" 88 1979 1997 "main.ml" 88 1979 2069
call(
  stack
)
type(
  unit
)
"main.ml" 88 1979 1981 "main.ml" 88 1979 2069
type(
  unit
)
"main.ml" 89 2071 2073 "main.ml" 89 2071 2076
type(
  bool
)
ident(
  int_ref acc "main.ml" 85 1823 1829 "main.ml" 85 1823 1832
)
"main.ml" 89 2071 2077 "main.ml" 89 2071 2079
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( && )
)
"main.ml" 89 2071 2080 "main.ml" 89 2071 2083
type(
  bool
)
ident(
  int_ref gen "main.ml" 86 1845 1851 "main.ml" 86 1845 1854
)
"main.ml" 89 2071 2084 "main.ml" 89 2071 2086
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( && )
)
"main.ml" 89 2071 2087 "main.ml" 89 2071 2088
type(
  bool
)
ident(
  int_ref b "main.ml" 84 1797 1817 "main.ml" 84 1797 1818
)
"main.ml" 89 2071 2080 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 89 2071 2073 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 88 1979 1981 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 87 1868 1870 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 86 1845 1847 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 85 1823 1825 "main.ml" 89 2071 2088
type(
  bool
)
"main.ml" 84 1797 1809 "main.ml" 89 2071 2090
type(
  Grammar.VNSet.elt -> bool -> bool
)
"main.ml" 89 2071 2091 "main.ml" 89 2071 2093
type(
  Grammar.VNSet.t
)
ident(
  int_ref nt "main.ml" 82 1760 1765 "main.ml" 82 1760 1767
)
"main.ml" 89 2071 2094 "main.ml" 89 2071 2098
type(
  bool
)
"main.ml" 84 1797 1798 "main.ml" 89 2071 2098
call(
  stack
)
type(
  bool
)
"main.ml" 90 2102 2107 "main.ml" 90 2102 2110
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"main.ml" 90 2102 2111 "main.ml" 90 2102 2113
type(
  bool
)
ident(
  int_ref wf "main.ml" 83 1786 1791 "main.ml" 83 1786 1793
)
"main.ml" 90 2102 2107 "main.ml" 90 2102 2113
type(
  bool
)
"main.ml" 90 2102 2119 "main.ml" 90 2102 2123
type(
  int -> unit
)
ident(
  ext_ref Pervasives.exit
)
"main.ml" 90 2102 2124 "main.ml" 90 2102 2125
type(
  int
)
"main.ml" 90 2102 2119 "main.ml" 90 2102 2125
call(
  stack
)
type(
  unit
)
"main.ml" 90 2102 2104 "main.ml" 90 2102 2125
type(
  unit
)
"main.ml" 91 2127 2129 "main.ml" 91 2127 2143
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 91 2127 2144 "main.ml" 91 2127 2150
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 91 2127 2151 "main.ml" 91 2127 2179
type(
  (unit, out_channel, unit) format
)
"main.ml" 91 2127 2129 "main.ml" 91 2127 2179
call(
  stack
)
type(
  unit
)
"main.ml" 92 2181 2187 "main.ml" 92 2181 2191
type(
  Grammar.VNSet.elt -> bool
)
ident(
  def null "main.ml" 93 2208 2210 "main.ml" 116 3186 3242
)
"main.ml" 92 2181 2194 "main.ml" 92 2181 2202
type(
  Grammar.grammar -> Grammar.VNSet.elt -> bool
)
ident(
  ext_ref LL1.null
)
"main.ml" 92 2181 2203 "main.ml" 92 2181 2204
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 92 2181 2194 "main.ml" 92 2181 2204
call(
  stack
)
type(
  Grammar.VNSet.elt -> bool
)
"main.ml" 93 2208 2214 "main.ml" 93 2208 2219
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  def first "main.ml" 94 2242 2244 "main.ml" 116 3186 3242
)
"main.ml" 93 2208 2222 "main.ml" 93 2208 2231
type(
  Grammar.grammar ->
  (Grammar.VNSet.elt -> bool) -> Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  ext_ref LL1.first
)
"main.ml" 93 2208 2232 "main.ml" 93 2208 2233
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 93 2208 2234 "main.ml" 93 2208 2238
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref null "main.ml" 92 2181 2187 "main.ml" 92 2181 2191
)
"main.ml" 93 2208 2222 "main.ml" 93 2208 2238
call(
  stack
)
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
"main.ml" 94 2242 2248 "main.ml" 94 2242 2254
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  def follow "main.ml" 95 2284 2286 "main.ml" 116 3186 3242
)
"main.ml" 94 2242 2257 "main.ml" 94 2242 2267
type(
  Grammar.grammar ->
  (Grammar.VNSet.elt -> bool) ->
  (Grammar.VNSet.elt -> Grammar.VTSet.t) ->
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  ext_ref LL1.follow
)
"main.ml" 94 2242 2268 "main.ml" 94 2242 2269
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 94 2242 2270 "main.ml" 94 2242 2274
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref null "main.ml" 92 2181 2187 "main.ml" 92 2181 2191
)
"main.ml" 94 2242 2275 "main.ml" 94 2242 2280
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  int_ref first "main.ml" 93 2208 2214 "main.ml" 93 2208 2219
)
"main.ml" 94 2242 2257 "main.ml" 94 2242 2280
call(
  stack
)
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
"main.ml" 95 2284 2286 "main.ml" 95 2284 2296
type(
  (Grammar.VNSet.elt -> unit) -> Grammar.VNSet.t -> unit
)
ident(
  ext_ref Grammar.VNSet.iter
)
"main.ml" 95 2284 2302 "main.ml" 95 2284 2304
type(
  Grammar.VNSet.elt
)
ident(
  def vn "main.ml" 95 2284 2308 "main.ml" 95 2284 2369
)
"main.ml" 95 2284 2308 "main.ml" 95 2284 2322
type(
  out_channel ->
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt -> bool -> unit, out_channel, unit)
  format ->
  (out_channel -> Grammar.VNSet.elt -> unit) ->
  Grammar.VNSet.elt -> bool -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 95 2284 2323 "main.ml" 95 2284 2329
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 95 2284 2330 "main.ml" 95 2284 2346
type(
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt -> bool -> unit, out_channel, unit)
  format
)
"main.ml" 95 2284 2347 "main.ml" 95 2284 2356
type(
  out_channel -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vn
)
"main.ml" 95 2284 2357 "main.ml" 95 2284 2359
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 95 2284 2302 "main.ml" 95 2284 2304
)
"main.ml" 95 2284 2361 "main.ml" 95 2284 2365
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref null "main.ml" 92 2181 2187 "main.ml" 92 2181 2191
)
"main.ml" 95 2284 2366 "main.ml" 95 2284 2368
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 95 2284 2302 "main.ml" 95 2284 2304
)
"main.ml" 95 2284 2360 "main.ml" 95 2284 2369
call(
  stack
)
type(
  bool
)
"main.ml" 95 2284 2308 "main.ml" 95 2284 2369
call(
  tail
)
type(
  unit
)
"main.ml" 95 2284 2297 "main.ml" 95 2284 2370
type(
  Grammar.VNSet.elt -> unit
)
"main.ml" 95 2284 2371 "main.ml" 95 2284 2373
type(
  Grammar.VNSet.t
)
ident(
  int_ref nt "main.ml" 82 1760 1765 "main.ml" 82 1760 1767
)
"main.ml" 95 2284 2286 "main.ml" 95 2284 2373
call(
  stack
)
type(
  unit
)
"main.ml" 96 2375 2377 "main.ml" 96 2375 2391
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 96 2375 2392 "main.ml" 96 2375 2398
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 96 2375 2399 "main.ml" 96 2375 2403
type(
  (unit, out_channel, unit) format
)
"main.ml" 96 2375 2377 "main.ml" 96 2375 2403
call(
  stack
)
type(
  unit
)
"main.ml" 97 2405 2407 "main.ml" 97 2405 2417
type(
  (Grammar.VNSet.elt -> unit) -> Grammar.VNSet.t -> unit
)
ident(
  ext_ref Grammar.VNSet.iter
)
"main.ml" 97 2405 2423 "main.ml" 97 2405 2425
type(
  Grammar.VNSet.elt
)
ident(
  def vn "main.ml" 97 2405 2429 "main.ml" 98 2470 2511
)
"main.ml" 97 2405 2429 "main.ml" 97 2405 2443
type(
  out_channel ->
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt ->
   (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit,
   out_channel, unit)
  format ->
  (out_channel -> Grammar.VNSet.elt -> unit) ->
  Grammar.VNSet.elt ->
  (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 97 2405 2444 "main.ml" 97 2405 2450
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 97 2405 2451 "main.ml" 97 2405 2468
type(
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt ->
   (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit,
   out_channel, unit)
  format
)
"main.ml" 98 2470 2473 "main.ml" 98 2470 2482
type(
  out_channel -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vn
)
"main.ml" 98 2470 2483 "main.ml" 98 2470 2485
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 97 2405 2423 "main.ml" 97 2405 2425
)
"main.ml" 98 2470 2486 "main.ml" 98 2470 2499
type(
  out_channel -> Grammar.VTSet.t -> unit
)
ident(
  int_ref output_vt_set "main.ml" 4 15 19 "main.ml" 4 15 32
)
"main.ml" 98 2470 2501 "main.ml" 98 2470 2506
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  int_ref first "main.ml" 93 2208 2214 "main.ml" 93 2208 2219
)
"main.ml" 98 2470 2508 "main.ml" 98 2470 2510
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 97 2405 2423 "main.ml" 97 2405 2425
)
"main.ml" 98 2470 2500 "main.ml" 98 2470 2511
call(
  stack
)
type(
  Grammar.VTSet.t
)
"main.ml" 97 2405 2429 "main.ml" 98 2470 2511
call(
  tail
)
type(
  unit
)
"main.ml" 97 2405 2418 "main.ml" 98 2470 2512
type(
  Grammar.VNSet.elt -> unit
)
"main.ml" 98 2470 2513 "main.ml" 98 2470 2515
type(
  Grammar.VNSet.t
)
ident(
  int_ref nt "main.ml" 82 1760 1765 "main.ml" 82 1760 1767
)
"main.ml" 97 2405 2407 "main.ml" 98 2470 2515
call(
  stack
)
type(
  unit
)
"main.ml" 99 2517 2519 "main.ml" 99 2517 2533
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 99 2517 2534 "main.ml" 99 2517 2540
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 99 2517 2541 "main.ml" 99 2517 2545
type(
  (unit, out_channel, unit) format
)
"main.ml" 99 2517 2519 "main.ml" 99 2517 2545
call(
  stack
)
type(
  unit
)
"main.ml" 100 2547 2549 "main.ml" 100 2547 2559
type(
  (Grammar.VNSet.elt -> unit) -> Grammar.VNSet.t -> unit
)
ident(
  ext_ref Grammar.VNSet.iter
)
"main.ml" 100 2547 2565 "main.ml" 100 2547 2567
type(
  Grammar.VNSet.elt
)
ident(
  def vn "main.ml" 100 2547 2571 "main.ml" 101 2613 2655
)
"main.ml" 100 2547 2571 "main.ml" 100 2547 2585
type(
  out_channel ->
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt ->
   (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit,
   out_channel, unit)
  format ->
  (out_channel -> Grammar.VNSet.elt -> unit) ->
  Grammar.VNSet.elt ->
  (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 100 2547 2586 "main.ml" 100 2547 2592
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 100 2547 2593 "main.ml" 100 2547 2611
type(
  ((out_channel -> Grammar.VNSet.elt -> unit) ->
   Grammar.VNSet.elt ->
   (out_channel -> Grammar.VTSet.t -> unit) -> Grammar.VTSet.t -> unit,
   out_channel, unit)
  format
)
"main.ml" 101 2613 2616 "main.ml" 101 2613 2625
type(
  out_channel -> Grammar.VNSet.elt -> unit
)
ident(
  ext_ref Grammar.output_vn
)
"main.ml" 101 2613 2626 "main.ml" 101 2613 2628
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 100 2547 2565 "main.ml" 100 2547 2567
)
"main.ml" 101 2613 2629 "main.ml" 101 2613 2642
type(
  out_channel -> Grammar.VTSet.t -> unit
)
ident(
  int_ref output_vt_set "main.ml" 4 15 19 "main.ml" 4 15 32
)
"main.ml" 101 2613 2644 "main.ml" 101 2613 2650
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  int_ref follow "main.ml" 94 2242 2248 "main.ml" 94 2242 2254
)
"main.ml" 101 2613 2652 "main.ml" 101 2613 2654
type(
  Grammar.VNSet.elt
)
ident(
  int_ref vn "main.ml" 100 2547 2565 "main.ml" 100 2547 2567
)
"main.ml" 101 2613 2643 "main.ml" 101 2613 2655
call(
  stack
)
type(
  Grammar.VTSet.t
)
"main.ml" 100 2547 2571 "main.ml" 101 2613 2655
call(
  tail
)
type(
  unit
)
"main.ml" 100 2547 2560 "main.ml" 101 2613 2656
type(
  Grammar.VNSet.elt -> unit
)
"main.ml" 101 2613 2657 "main.ml" 101 2613 2659
type(
  Grammar.VNSet.t
)
ident(
  int_ref nt "main.ml" 82 1760 1765 "main.ml" 82 1760 1767
)
"main.ml" 100 2547 2549 "main.ml" 101 2613 2659
call(
  stack
)
type(
  unit
)
"main.ml" 102 2662 2664 "main.ml" 102 2662 2678
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 102 2662 2679 "main.ml" 102 2662 2685
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 102 2662 2686 "main.ml" 102 2662 2690
type(
  (unit, out_channel, unit) format
)
"main.ml" 102 2662 2664 "main.ml" 102 2662 2690
call(
  stack
)
type(
  unit
)
"main.ml" 103 2692 2694 "main.ml" 103 2692 2699
type(
  out_channel -> unit
)
ident(
  ext_ref Pervasives.flush
)
"main.ml" 103 2692 2700 "main.ml" 103 2692 2706
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 103 2692 2694 "main.ml" 103 2692 2706
call(
  stack
)
type(
  unit
)
"main.ml" 104 2710 2715 "main.ml" 104 2710 2725
type(
  Grammar.grammar ->
  (Grammar.VNSet.elt -> bool) ->
  (Grammar.VNSet.elt -> Grammar.VTSet.t) ->
  (Grammar.VNSet.elt -> Grammar.VTSet.t) -> bool
)
ident(
  ext_ref LL1.is_ll1
)
"main.ml" 104 2710 2726 "main.ml" 104 2710 2727
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 104 2710 2728 "main.ml" 104 2710 2732
type(
  Grammar.VNSet.elt -> bool
)
ident(
  int_ref null "main.ml" 92 2181 2187 "main.ml" 92 2181 2191
)
"main.ml" 104 2710 2733 "main.ml" 104 2710 2738
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  int_ref first "main.ml" 93 2208 2214 "main.ml" 93 2208 2219
)
"main.ml" 104 2710 2739 "main.ml" 104 2710 2745
type(
  Grammar.VNSet.elt -> Grammar.VTSet.t
)
ident(
  int_ref follow "main.ml" 94 2242 2248 "main.ml" 94 2242 2254
)
"main.ml" 104 2710 2715 "main.ml" 104 2710 2745
call(
  stack
)
type(
  bool
)
"main.ml" 106 2759 2762 "main.ml" 106 2759 2776
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 106 2759 2777 "main.ml" 106 2759 2783
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 106 2759 2784 "main.ml" 106 2759 2806
type(
  (unit, out_channel, unit) format
)
"main.ml" 106 2759 2762 "main.ml" 106 2759 2806
call(
  stack
)
type(
  unit
)
"main.ml" 108 2817 2823 "main.ml" 108 2817 2837
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 108 2817 2838 "main.ml" 108 2817 2844
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 108 2817 2845 "main.ml" 108 2817 2864
type(
  (unit, out_channel, unit) format
)
"main.ml" 108 2817 2823 "main.ml" 108 2817 2864
call(
  stack
)
type(
  unit
)
"main.ml" 109 2866 2872 "main.ml" 109 2866 2877
type(
  out_channel -> unit
)
ident(
  ext_ref Pervasives.flush
)
"main.ml" 109 2866 2878 "main.ml" 109 2866 2884
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 109 2866 2872 "main.ml" 109 2866 2884
call(
  stack
)
type(
  unit
)
"main.ml" 110 2886 2896 "main.ml" 110 2886 2902
type(
  Lexing.lexbuf
)
ident(
  def lexbuf "main.ml" 111 2935 2941 "main.ml" 113 3050 3108
)
"main.ml" 110 2886 2905 "main.ml" 110 2886 2924
type(
  in_channel -> Lexing.lexbuf
)
ident(
  ext_ref Lexing.from_channel
)
"main.ml" 110 2886 2925 "main.ml" 110 2886 2930
type(
  in_channel
)
ident(
  ext_ref Pervasives.stdin
)
"main.ml" 110 2886 2905 "main.ml" 110 2886 2930
call(
  stack
)
type(
  Lexing.lexbuf
)
"main.ml" 111 2935 2945 "main.ml" 111 2935 2951
type(
  MyLexer.ulex list
)
ident(
  def stream "main.ml" 112 2973 2979 "main.ml" 113 3050 3108
)
"main.ml" 111 2935 2954 "main.ml" 111 2935 2961
type(
  Lexing.lexbuf -> MyLexer.ulex list
)
ident(
  int_ref scanner "main.ml" 45 947 951 "main.ml" 45 947 958
)
"main.ml" 111 2935 2962 "main.ml" 111 2935 2968
type(
  Lexing.lexbuf
)
ident(
  int_ref lexbuf "main.ml" 110 2886 2896 "main.ml" 110 2886 2902
)
"main.ml" 111 2935 2954 "main.ml" 111 2935 2968
call(
  stack
)
type(
  MyLexer.ulex list
)
"main.ml" 112 2973 2983 "main.ml" 112 2973 2987
type(
  MyLexer.ulex Engine.parse_tree
)
ident(
  def tree "main.ml" 113 3050 3056 "main.ml" 113 3050 3108
)
"main.ml" 112 2973 2993 "main.ml" 112 2973 3005
type(
  Grammar.grammar ->
  (MyLexer.ulex -> Grammar.vt) ->
  MyLexer.ulex list -> MyLexer.ulex Engine.parse_tree
)
ident(
  ext_ref Engine.parse
)
"main.ml" 112 2973 3006 "main.ml" 112 2973 3007
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 112 2973 3009 "main.ml" 112 2973 3033
type(
  Grammar.grammar -> MyLexer.ulex -> Grammar.vt
)
ident(
  ext_ref MyLexer.terminal_of_ulex
)
"main.ml" 112 2973 3034 "main.ml" 112 2973 3035
type(
  Grammar.grammar
)
ident(
  int_ref g "main.ml" 79 1667 1672 "main.ml" 79 1667 1673
)
"main.ml" 112 2973 3008 "main.ml" 112 2973 3036
call(
  stack
)
type(
  MyLexer.ulex -> Grammar.vt
)
"main.ml" 112 2973 3038 "main.ml" 112 2973 3044
type(
  MyLexer.ulex list
)
ident(
  int_ref stream "main.ml" 111 2935 2945 "main.ml" 111 2935 2951
)
"main.ml" 112 2973 2992 "main.ml" 112 2973 3045
call(
  stack
)
type(
  MyLexer.ulex Engine.parse_tree
)
"main.ml" 113 3050 3056 "main.ml" 113 3050 3079
type(
  (MyLexer.ulex -> string) -> MyLexer.ulex Engine.parse_tree -> unit
)
ident(
  ext_ref Engine.print_parse_tree
)
"main.ml" 113 3050 3080 "main.ml" 113 3050 3103
type(
  MyLexer.ulex -> string
)
ident(
  ext_ref MyLexer.string_of_token
)
"main.ml" 113 3050 3104 "main.ml" 113 3050 3108
type(
  MyLexer.ulex Engine.parse_tree
)
ident(
  int_ref tree "main.ml" 112 2973 2983 "main.ml" 112 2973 2987
)
"main.ml" 113 3050 3056 "main.ml" 113 3050 3108
call(
  stack
)
type(
  unit
)
"main.ml" 112 2973 2979 "main.ml" 113 3050 3108
type(
  unit
)
"main.ml" 111 2935 2941 "main.ml" 113 3050 3108
type(
  unit
)
"main.ml" 110 2886 2892 "main.ml" 113 3050 3108
type(
  unit
)
"main.ml" 109 2866 2872 "main.ml" 113 3050 3108
type(
  unit
)
"main.ml" 108 2817 2823 "main.ml" 113 3050 3108
type(
  unit
)
"main.ml" 114 3109 3118 "main.ml" 114 3109 3121
type(
  exn
)
ident(
  def exn "main.ml" 114 3109 3125 "main.ml" 114 3109 3178
)
"main.ml" 114 3109 3125 "main.ml" 114 3109 3139
type(
  out_channel -> (string -> unit, out_channel, unit) format -> string -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 114 3109 3140 "main.ml" 114 3109 3146
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 114 3109 3147 "main.ml" 114 3109 3153
type(
  (string -> unit, out_channel, unit) format
)
"main.ml" 114 3109 3155 "main.ml" 114 3109 3173
type(
  exn -> string
)
ident(
  ext_ref Printexc.to_string
)
"main.ml" 114 3109 3174 "main.ml" 114 3109 3177
type(
  exn
)
ident(
  int_ref exn "main.ml" 114 3109 3118 "main.ml" 114 3109 3121
)
"main.ml" 114 3109 3154 "main.ml" 114 3109 3178
call(
  stack
)
type(
  string
)
"main.ml" 114 3109 3125 "main.ml" 114 3109 3178
call(
  stack
)
type(
  unit
)
"main.ml" 107 2809 2813 "main.ml" 114 3109 3178
type(
  unit
)
"main.ml" 105 2746 2753 "main.ml" 115 3179 3184
type(
  unit
)
"main.ml" 116 3186 3193 "main.ml" 116 3186 3207
type(
  out_channel -> (unit, out_channel, unit) format -> unit
)
ident(
  ext_ref Printf.fprintf
)
"main.ml" 116 3186 3208 "main.ml" 116 3186 3214
type(
  out_channel
)
ident(
  ext_ref Pervasives.stdout
)
"main.ml" 116 3186 3215 "main.ml" 116 3186 3241
type(
  (unit, out_channel, unit) format
)
"main.ml" 116 3186 3193 "main.ml" 116 3186 3241
call(
  stack
)
type(
  unit
)
"main.ml" 104 2710 2712 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 103 2692 2694 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 102 2662 2664 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 100 2547 2549 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 99 2517 2519 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 97 2405 2407 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 96 2375 2377 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 95 2284 2286 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 94 2242 2244 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 93 2208 2210 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 92 2181 2183 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 91 2127 2129 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 90 2102 2104 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 83 1786 1787 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 82 1760 1761 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 81 1736 1737 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 80 1712 1713 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 79 1667 1668 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 78 1652 1653 "main.ml" 116 3186 3242
type(
  unit
)
"main.ml" 77 1609 1610 "main.ml" 116 3186 3242
type(
  unit
)
