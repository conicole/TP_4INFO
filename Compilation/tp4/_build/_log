### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules eval.ml > eval.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.ml > ast.ml.depends
# Target: value.ml.depends, tags: { extension:ml, file:value.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules value.ml > value.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o ast.cmo ast.ml
# Target: value.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:value.cmo, file:value.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o value.cmo value.ml
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly
+ /usr/bin/ocamlyacc -v parser.mly
6 shift/reduce conflicts.
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli
# Target: print_expr.ml.depends, tags: { extension:ml, file:print_expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules print_expr.ml > print_expr.ml.depends
# Target: print_val.ml.depends, tags: { extension:ml, file:print_val.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules print_val.ml > print_val.ml.depends
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o eval.cmo eval.ml
+ /usr/bin/ocamlc -c -o eval.cmo eval.ml
File "eval.ml", line 40, characters 37-40:
Error: This expression has type Ast.ml_expr
       but an expression was expected of type 'a * 'b
Command exited with code 2.
# Compilation unsuccessful.
