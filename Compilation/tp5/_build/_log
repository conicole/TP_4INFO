### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules eval.ml > eval.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules ast.ml > ast.ml.depends
# Target: value.ml.depends, tags: { extension:ml, file:value.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules value.ml > value.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o ast.cmo ast.ml
# Target: value.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:value.cmo, file:value.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o value.cmo value.ml
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends
# Target: strSet.mli.depends, tags: { extension:mli, file:strSet.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules strSet.mli > strSet.mli.depends
# Target: strSet.cmi, tags: { byte, compile, extension:mli, file:strSet.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o strSet.cmi strSet.mli
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli
# Target: print_ast.ml.depends, tags: { extension:ml, file:print_ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules print_ast.ml > print_ast.ml.depends
# Target: print_val.ml.depends, tags: { extension:ml, file:print_val.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules print_val.ml > print_val.ml.depends
# Target: typEnv.mli.depends, tags: { extension:mli, file:typEnv.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules typEnv.mli > typEnv.mli.depends
# Target: typing.ml.depends, tags: { extension:ml, file:typing.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules typing.ml > typing.ml.depends
# Target: print_ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:print_ast.cmo, file:print_ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o print_ast.cmo print_ast.ml
# Target: typEnv.cmi, tags: { byte, compile, extension:mli, file:typEnv.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o typEnv.cmi typEnv.mli
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o eval.cmo eval.ml
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml
# Target: print_val.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:print_val.cmo, file:print_val.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o print_val.cmo print_val.ml
# Target: typing.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:typing.cmo, file:typing.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o typing.cmo typing.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o main.cmo main.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o ast.cmx ast.ml
# Target: value.cmx, tags: { compile, extension:cmx, extension:ml, file:value.cmx, file:value.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o value.cmx value.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: strSet.ml.depends, tags: { extension:ml, file:strSet.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules strSet.ml > strSet.ml.depends
# Target: strSet.cmx, tags: { compile, extension:cmx, extension:ml, file:strSet.cmx, file:strSet.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o strSet.cmx strSet.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o parser.cmx parser.ml
# Target: typEnv.ml.depends, tags: { extension:ml, file:typEnv.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules typEnv.ml > typEnv.ml.depends
# Target: print_ast.cmx, tags: { compile, extension:cmx, extension:ml, file:print_ast.cmx, file:print_ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o print_ast.cmx print_ast.ml
# Target: typEnv.cmx, tags: { compile, extension:cmx, extension:ml, file:typEnv.cmx, file:typEnv.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o typEnv.cmx typEnv.ml
# Target: eval.cmx, tags: { compile, extension:cmx, extension:ml, file:eval.cmx, file:eval.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o eval.cmx eval.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o lexer.cmx lexer.ml
# Target: print_val.cmx, tags: { compile, extension:cmx, extension:ml, file:print_val.cmx, file:print_val.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o print_val.cmx print_val.ml
# Target: typing.cmx, tags: { compile, extension:cmx, extension:ml, file:typing.cmx, file:typing.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o typing.cmx typing.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt ast.cmx value.cmx eval.cmx strSet.cmx parser.cmx lexer.cmx print_ast.cmx print_val.cmx typEnv.cmx typing.cmx main.cmx -o main.native
# Compilation successful.
